#!/bin/bash

GROUP_URI="https://gitlab.com/api/v4/groups/${GROUP_ID}/projects"

# Checks if the group repo metadata has changed
# x-total shows the total of repos in the group
function get_group_info {

    if [[ ! -d $CENTOS_DISTGIT_PATH ]]; then
        mkdir -p $CENTOS_DISTGIT_PATH
    fi

    echo "Getting rpm group metadata"
    tmp_repo_info="${CENTOS_DISTGIT_PATH}/tmp_repo_info.txt"

    # Initialize repo_info.txt
    if [[ ! -f ${GROUP_INFO} ]]; then
        tmp_repo_info=$GROUP_INFO
    fi

    curl -s --head --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
        "${GROUP_URI}?per_page=1" > ${tmp_repo_info}
    current_package_count=$(grep -Po 'x-total: \K(\d+)' $GROUP_INFO)
    tmp_package_count=$(grep -Po 'x-total: \K(\d+)' $tmp_repo_info)

    echo "Current package count: ${current_package_count}"
    echo "Remote package count: ${tmp_package_count}"

    # For now we just check if package count has increased
    if (( $tmp_package_count > $current_package_count )); then
        echo "Updating group info file"
        cp $tmp_repo_info $GROUP_INFO
        REFRESH="true"
    fi
}


# Get the number of repositories in the group
function get_total_repos {
    TOTAL_REPOS=$(grep -Po 'x-total: \K\d*' $GROUP_INFO)
}


# Get repo info and save it to a file
function get_all_repo_info {
    echo "Getting CentOS Stream gitlab repos"
    PAGE=1

    # Guardamos la informaciÃ³n de cada repo en un archivo
    while [ 1 ]; do
        echo "Getting page: ${PAGE}"
        current_page="${CENTOS_DISTGIT_PATH}/centos_distgit_page_${PAGE}.json"
        curl -s --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
            "${GROUP_URI}?per_page=100&page=${PAGE}&with_shared=false" | \
            jq '.[]' > $current_page
        ((PAGE++))
        if [[ ! -s $current_page ]]; then
            break
        fi
    done
    jq -s '.' ${CENTOS_DISTGIT_PATH}/centos_distgit_page_* > $REPO_INFO_PATH
}


# Clone repositories into CENTOS_DISTGIT_PATH
function clone_repos {
    if [[ ! -d $DBS_REPO_PATH ]]; then
        mkdir $DBS_REPO_PATH
    fi

    echo "Cloning repos"
    REPOS=( $(jq -r '.[] | .http_url_to_repo' $REPO_INFO_PATH) )
    pushd $DBS_REPO_PATH
    for r in "${REPOS[@]}"; do
        IFS='/' read -r -a path <<< "$r"
        echo "Cloning: ${path[${#path[@]}-1]}"
        echo "git clone $r"
        if [[ ${DRY_RUN} != "true" ]]; then
            git clone $r
        fi
        echo
    done
    popd
}
